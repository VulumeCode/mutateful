// Test generated by mutate4l from formula: [0] quantize -by [1]
[TestMethod]
public void NameThisMethod()
{
    byte[] input = { 205, 0, 0, 2, 0, 33, 0, 0, 128, 64, 1, 5, 0, 62, 48, 19, 194, 63, 0, 0, 128, 62, 100, 64, 141, 188, 203, 62, 0, 0, 128, 62, 100, 67, 173, 25, 39, 63, 219, 9, 46, 62, 100, 67, 48, 185, 50, 64, 121, 241, 167, 62, 100, 68, 201, 0, 231, 63, 0, 0, 128, 62, 100, 0, 29, 0, 0, 128, 64, 1, 4, 0, 67, 0, 0, 192, 63, 0, 0, 0, 63, 100, 67, 0, 0, 16, 64, 0, 0, 224, 63, 100, 70, 41, 115, 140, 63, 0, 0, 128, 62, 100, 72, 208, 77, 188, 61, 0, 0, 64, 63, 100, 91, 48, 93, 32, 113, 117, 97, 110, 116, 105, 122, 101, 32, 45, 98, 121, 32, 91, 49, 93 };
    byte[] output = { 205, 0, 0, 0, 128, 64, 1, 5, 0, 64, 208, 77, 188, 61, 0, 0, 128, 62, 100, 67, 38, 115, 140, 63, 221, 9, 46, 62, 100, 62, 0, 0, 192, 63, 0, 0, 128, 62, 100, 68, 0, 0, 192, 63, 0, 0, 128, 62, 100, 67, 0, 0, 16, 64, 122, 241, 167, 62, 100 };

    TestUtilities.InputShouldProduceGivenOutput(input, output);
}

// Test generated by mutate4l from formula: [0] quantize 1/16 1/32
[TestMethod]
public void NameThisMethod()
{
    byte[] input = { 205, 0, 0, 1, 0, 33, 0, 0, 128, 64, 1, 5, 0, 62, 48, 19, 194, 63, 0, 0, 128, 62, 100, 64, 141, 188, 203, 62, 0, 0, 128, 62, 100, 67, 173, 25, 39, 63, 219, 9, 46, 62, 100, 67, 48, 185, 50, 64, 121, 241, 167, 62, 100, 68, 201, 0, 231, 63, 0, 0, 128, 62, 100, 91, 48, 93, 32, 113, 117, 97, 110, 116, 105, 122, 101, 32, 49, 47, 49, 54, 32, 49, 47, 51, 50 };
    byte[] output = { 205, 0, 0, 0, 128, 64, 1, 5, 0, 64, 0, 0, 192, 62, 0, 0, 128, 62, 100, 67, 0, 0, 32, 63, 221, 9, 46, 62, 100, 62, 0, 0, 192, 63, 0, 0, 128, 62, 100, 68, 0, 0, 224, 63, 0, 0, 128, 62, 100, 67, 0, 0, 56, 64, 122, 241, 167, 62, 100 };

    TestUtilities.InputShouldProduceGivenOutput(input, output);
}

// Test generated by mutate4l from formula: [0] legato
[TestMethod]
public void NameThisMethod()
{
    byte[] input = { 203, 0, 0, 1, 0, 28, 0, 0, 128, 64, 1, 6, 0, 72, 0, 0, 96, 63, 0, 0, 128, 62, 100, 73, 51, 19, 98, 63, 0, 0, 128, 62, 100, 73, 0, 0, 208, 63, 0, 0, 0, 62, 100, 73, 0, 0, 8, 64, 0, 0, 0, 62, 100, 74, 153, 9, 97, 63, 0, 0, 128, 62, 100, 75, 148, 57, 102, 63, 99, 51, 206, 61, 100, 91, 48, 93, 32, 108, 101, 103, 97, 116, 111 };
    byte[] output = { 203, 0, 0, 0, 128, 64, 1, 6, 0, 72, 0, 0, 96, 63, 0, 0, 64, 63, 100, 74, 153, 9, 97, 63, 103, 246, 62, 63, 100, 73, 52, 19, 98, 63, 204, 236, 61, 63, 100, 75, 148, 57, 102, 63, 108, 198, 57, 63, 100, 73, 0, 0, 208, 63, 0, 0, 0, 63, 100, 73, 0, 0, 8, 64, 0, 0, 240, 63, 100 };

    TestUtilities.InputShouldProduceGivenOutput(input, output);
}

